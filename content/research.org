#+title: Research
#+author: Asilata Bapat
#+startup: noptag content

* {{{title}}}
#+begin_src emacs-lisp :results silent :exports resu
  (defun pp-short-talk ()
    (let ((shorttitle (org-entry-get nil "shorttitle"))
          (date (encode-time (org-parse-time-string (org-entry-get nil "SCHEDULED"))))
          (location (org-entry-get nil "location"))
          (links (org-entry-get nil "link")))
      (format "%s%s"
              (concat
               (if shorttitle (concat shorttitle " ")
                 (if location (concat location " ") ""))
               (org-format-time-string "%Y" date))
              (if links (format " (%s)" links) ""))))

  (defun paper-to-talks (slug)
    (string-join
     (org-map-entries
      'pp-short-talk
      (format "activity+%s" slug)
      '("data.org"))
     ", "))

  (defun pp-research-output ()
    "Pretty-print the current research output item (e.g. paper, preprint, or code). This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (with (org-entry-get nil "with"))
          (comment (org-entry-get nil "comment"))
          (links (org-entry-get nil "link"))
          (slug (org-entry-get nil "slug")))
      (format "#+begin_papers\n*%s*%s%s%s\n\n%s\n#+end_papers"
              title
              (if (or (not with) (string-equal with ""))
                  ""
                (format " (with %s)" with))
              (if comment (concat "\\\\\n" comment) "")
              (if slug (concat "\\\\\n*Talks:* "(paper-to-talks slug)) "")
              (if links (format "(%s)" links) ""))))
#+end_src

** Work in progress
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-research-output
    "inprogress+LEVEL=2"
    '("data.org"))
   "\n")
#+end_src

** Papers
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-research-output
    "paper+LEVEL=2"
    '("data.org"))
   "\n")
#+end_src

** Not for publication
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-research-output
    "nfp+LEVEL=2"
    '("data.org"))
   "\n")
#+end_src

** Code
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-research-output
    "code+LEVEL=2"
    '("data.org"))
   "\n")
#+end_src
