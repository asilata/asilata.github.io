#+title: Curriculum Vitae
#+options: toc:nil num:nil
#+latex_class: moderncv
#+latex_class_options: [a4paper]
#+latex_header: \moderncvtheme{banking}
#+latex_header_extra: \usepackage[margin=1.5cm]{geometry} \usepackage[charter]{mathdesign}
#+latex_header_extra: \firstname{Asilata}\familyname{Bapat} \title{Curriculum Vitae}
#+latex_header_extra: \address{Mathematical Sciences Institute, The Australian National University}
#+latex_header_extra: \email{asilata.bapat@anu.edu.au} \homepage{asilata.github.io} \phone{02 6125 7320}

#+macro: backend-settings (eval (if (org-export-derived-backend-p org-export-current-backend 'latex) (setq-local latex-export t) (setq-local latex-export nil)))

* Setup                                                            :noexport:
{{{backend-settings}}}

#+begin_src emacs-lisp :results silent :exports results
  ;; Some helper functions
  (defun pp-education-cv-latex ()
    "Pretty-print the current education item (latex style). This function is called when mapping over entries in the data.org file."
    (let ((uni (org-entry-get nil "ITEM"))
          (date (org-entry-get nil "date"))
          (degree (org-entry-get nil "degree"))
          (location (org-entry-get nil "location"))          
          (comment (org-entry-get nil "comment")))
      (format "\\cventry{%s}{%s}{%s}{%s}{}{%s}"
              (if date date)
              (if degree degree)
              (if uni uni)
              (if location location)
              (if comment comment ""))
      ))

  (defun pp-education-cv ()
    "Pretty-print the current education item. This function is called when mapping over entries in the data.org file."
    (let ((uni (org-entry-get nil "ITEM"))
          (date (org-entry-get nil "date"))
          (degree (org-entry-get nil "degree"))
          (location (org-entry-get nil "location"))          
          (comment (org-entry-get nil "comment")))
      (format "- *%s*: %s %s, %s %s"
              (if date date)
              (if degree degree)
              (if uni uni)
              (if location location)
              (if comment (concat "\\\\\n  " comment) ""))
      ))

  (defun pp-employment-cv-latex ()
    "Pretty-print the current employment item. This function is called when mapping over entries in the data.org file."
    (let ((uni (org-entry-get nil "ITEM"))
          (date (org-entry-get nil "date"))
          (job (org-entry-get nil "job"))
          (department (org-entry-get nil "department"))          
          (location (org-entry-get nil "location")))
      (format "\\cventry{%s}{%s}{%s}{%s}{%s}{}"
              (if date date)
              (if job job)
              (if uni uni)
              (if location location)
              (if department department))
      ))

  (defun pp-employment-cv ()
    "Pretty-print the current employment item. This function is called when mapping over entries in the data.org file."
    (let ((uni (org-entry-get nil "ITEM"))
          (date (org-entry-get nil "date"))
          (job (org-entry-get nil "job"))
          (department (org-entry-get nil "department"))          
          (location (org-entry-get nil "location")))
      (format "- *%s*: %s, %s, %s, %s"
              (if date date)
              (if job job)
              (if department department)                
              (if uni uni)
              (if location location)
              )
      ))

  (defun pp-research-output-cv ()
    "Pretty-print the current research output item (e.g. paper, preprint, or code). This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (with (org-entry-get nil "with"))
          (comment (org-entry-get nil "comment"))
          (links (org-entry-get nil "link"))
          (slug (org-entry-get nil "slug")))
      (format "- %s%s%s"
              title
              (if (or (not with) (string-equal with ""))
                  ""
                (format " (with %s)" with))
              (if comment (concat "\\\\\n  " "/" comment "/") "")
              )
      ))

  (defun pp-award-cv ()
    "Pretty-print the current award item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM")))
      (format "- %s" title)
      ))

  (defun pp-grant-cv-latex ()
    "Pretty-print the current award item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (location (org-entry-get nil "location"))
          (description (org-entry-get nil "description"))          
          (comment (org-entry-get nil "comment"))
          (date (org-entry-get nil "date"))
          (amount (org-entry-get nil "amount")))
      (format "\\cventry{%s}{%s}{%s}{%s}{}{%s}"
              (if date date)
              (if description (concat description (if amount (concat " (" amount ")") "")))
              (if title title)
              (if location location)
              (if comment comment "")
              )
      ))

  (defun pp-grant-cv ()
    "Pretty-print the current award item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (location (org-entry-get nil "location"))
          (description (org-entry-get nil "description"))          
          (comment (org-entry-get nil "comment"))
          (date (org-entry-get nil "date"))
          (amount (org-entry-get nil "amount")))
      (format "- *%s*: /%s/, %s, %s%s"
              (if date date)
              (if title title)
              (if description (concat description (if amount (concat " (" amount ")") "")))
              (if location location)
              (if comment (concat "\\\\\n  " comment) "")
              )
      ))

  (defun pp-course-cv ()
    "Pretty-print the current course item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (display-date (org-entry-get nil "display-date"))
          (comment (org-entry-get nil "comment"))
          )
      (format "- *%s*: %s %s"
              display-date
              title
              (if (or (not comment) (string-equal comment ""))
                  ""
                comment))
      ))

  (defun pp-activity-cv ()
    "Pretty-print the current activity item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (scheduled (encode-time (org-parse-time-string (org-entry-get nil "SCHEDULED"))))
          (display-date (org-entry-get nil "display-date"))
          (with (org-entry-get nil "with"))
          (location (org-entry-get nil "location"))
          (links (org-entry-get nil "link"))
          (comment (org-entry-get nil "comment")))
      (format "- *%s*: %s%s%s%s"
              (if display-date display-date
                (org-format-time-string "%b %Y" scheduled))
              title
              (if location (concat ", " location) "")
              (if with (concat ", with " with) "")
              (if comment (format " (%s)" comment) "")
              )
      ))
#+end_src

* Education
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    (if latex-export 'pp-education-cv-latex 'pp-education-cv)
    "education+LEVEL=2"
    '("../data.org"))
   "\n")
#+end_src

* Employment
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    (if latex-export 'pp-employment-cv-latex 'pp-employment-cv)
    "employment+LEVEL=2"
    '("../data.org"))
   "\n")
#+end_src
   
* Papers and preprints
#+begin_src emacs-lisp :results value raw :exports results
  (string-join (org-map-entries
                'pp-research-output-cv
                "paper+LEVEL=2"
                '("../data.org"))
               "\n")
#+end_src

* Grants
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    (if latex-export 'pp-grant-cv-latex 'pp-grant-cv)
    "grant+LEVEL=2"
    '("../data.org"))
   "\n")
#+end_src

* Academic and teaching awards
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-award-cv
    "award+LEVEL=2"
    '("../data.org"))
   "\n")
#+end_src

* Teaching
** Australian National University
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course-cv
    "teaching+LEVEL=2+location=\"Australian National University\""
    '("../data.org"))
   "\n")
#+end_src


** University of Georgia
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course-cv
    "teaching+LEVEL=2+location=\"University of Georgia\""
    '("../data.org"))
   "\n")
#+end_src

** University of Chicago
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course-cv
    "teaching+LEVEL=2+location=\"University of Chicago\""
    '("../data.org"))
   "\n")
#+end_src

** Canada/USA Mathcamp
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course-cv
    "teaching+LEVEL=2+location=\"Canada/USA Mathcamp\""
    '("../data.org"))
   "\n")
#+end_src

* Talks and presentations
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-activity-cv
    "activity+LEVEL=2+type=\"presentation\""
    '("../data.org"))
   "\n")
#+end_src

