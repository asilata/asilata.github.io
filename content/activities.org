#+title: Activities
#+author: Asilata Bapat
#+startup: noptag content

* {{{title}}}
#+begin_src emacs-lisp :results silent :exports results
  (defun pp-activity ()
    "Pretty-print the current activity item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (scheduled (encode-time (org-parse-time-string (org-entry-get nil "SCHEDULED"))))
          (display-date (org-entry-get nil "display-date"))
          (with (org-entry-get nil "with"))
          (location (org-entry-get nil "location"))
          (links (org-entry-get nil "link"))
          (comment (org-entry-get nil "comment")))
      (format "- *%s%s*: %s%s%s%s%s"
              (if display-date display-date
                (org-format-time-string "%b %Y" scheduled))
              (if (time-less-p (current-time) scheduled) " (upcoming)" "")
              title
              (if location (concat ", " location) "")
              (if with (concat ", with " with) "")
              (if comment (format " (%s)" comment) "")
              (if links (format " (%s)" links) ""))
      ))
#+end_src

** Talks and presentations
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-activity
    "activity+LEVEL=2+type=\"presentation\""
    '("data.org"))
   "\n")
#+end_src

** Research visits
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-activity
    "activity+LEVEL=2+type=\"visit\""
    '("data.org"))
   "\n")
#+end_src

** Outreach
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-activity
    "activity+LEVEL=2+type=\"outreach\""
    '("data.org"))
   "\n")
#+end_src

** Organization, etc
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-activity
    "activity+LEVEL=2+type=\"other\""
    '("data.org"))
   "\n")
#+end_src

