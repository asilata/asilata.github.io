#+title: Curriculum Vitae
#+options: toc:nil
#+latex_class: moderncv
#+latex_class_options: [a4paper]
#+latex_header: \usepackage[margin=1.5cm]{geometry} \usepackage[charter]{mathdesign}
#+latex_header_extra: \moderncvtheme{banking}
#+latex_header_extra: \firstname{Asilata}\familyname{Bapat} \title{Curriculum Vitae}
#+latex_header_extra: \address{Mathematical Sciences Institute, The Australian National University}
#+latex_header_extra: \email{asilata.bapat@anu.edu.au} \homepage{https://asilata.github.io} \phone{02 6125 7320}

* Education
#+begin_src emacs-lisp :results value raw :exports results
  (defun pp-education-cv ()
    "Pretty-print the current education item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (date (org-entry-get nil "date"))
          (comment (org-entry-get nil "comment")))
      (format "- *%s*: %s"
              (if date date)
              (if title title)
              (if comment (concat "\\\\n  " + comment)))
      ))

  (string-join
   (org-map-entries
    'pp-education-cv
    "education+LEVEL=2"
    '("data.org"))
   "\n")
#+end_src

* Employment

* Papers and preprints
#+begin_src emacs-lisp :results value raw :exports results
  (defun pp-research-output-cv ()
    "Pretty-print the current research output item (e.g. paper, preprint, or code). This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (with (org-entry-get nil "with"))
          (comment (org-entry-get nil "comment"))
          (links (org-entry-get nil "link"))
          (slug (org-entry-get nil "slug")))
      (format "- %s%s%s"
              title
              (if (or (not with) (string-equal with ""))
                  ""
                (format " (with %s)" with))
              (if comment (concat "\\\\\n  " "/" comment "/") "")
              )
      ))

  (string-join (org-map-entries
                'pp-research-output-cv
                "paper+LEVEL=2"
                '("data.org"))
               "\n")
#+end_src

* Teaching
** Australian National University
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course
    "teaching+LEVEL=2+location=\"Australian National University\""
    '("data.org"))
   "\n")
#+end_src


** University of Georgia
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course
    "teaching+LEVEL=2+location=\"University of Georgia\""
    '("data.org"))
   "\n")
#+end_src

** University of Chicago
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course
    "teaching+LEVEL=2+location=\"University of Chicago\""
    '("data.org"))
   "\n")
#+end_src

** Canada/USA Mathcamp
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course
    "teaching+LEVEL=2+location=\"Canada/USA Mathcamp\""
    '("data.org"))
   "\n")
#+end_src

* Talks and presentations :noexport:
#+begin_src emacs-lisp :results value raw :exports results
  (defun pp-activity-cv ()
    "Pretty-print the current activity item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (scheduled (encode-time (org-parse-time-string (org-entry-get nil "SCHEDULED"))))
          (display-date (org-entry-get nil "display-date"))
          (with (org-entry-get nil "with"))
          (location (org-entry-get nil "location"))
          (links (org-entry-get nil "link"))
          (comment (org-entry-get nil "comment")))
      (format "- *%s*: %s%s%s%s"
              (if display-date display-date
                (org-format-time-string "%b %Y" scheduled))
              title
              (if location (concat ", " location) "")
              (if with (concat ", with " with) "")
              (if comment (format " (%s)" comment) "")
              )
              ))

  (string-join
   (org-map-entries
    'pp-activity-cv
    "activity+LEVEL=2+category=\"presentation\""
    '("data.org"))
   "\n")
#+end_src

* Local variables                                                  :noexport:
# Local variables:
# eval: (add-hook 'org-export-before-processing-hook (lambda (be) (org-babel-ref-resolve "export-setup")) nil t)
# End:
