#+title: Teaching
#+author: Asilata Bapat
#+startup: noptag content

* {{{title}}}
#+begin_src emacs-lisp :results silent :exports results
  (defun pp-course ()
    "Pretty-print the current course item. This function is called when mapping over entries in the data.org file."
    (let ((title (org-entry-get nil "ITEM"))
          (display-date (org-entry-get nil "display-date"))
          (comment (org-entry-get nil "comment"))
          )
      (format "- *%s*: %s %s"
              display-date
              title
              (if (or (not comment) (string-equal comment ""))
                  ""
                comment))
      ))
#+end_src

** Australian National University
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course
    "teaching+LEVEL=2+location=\"Australian National University\""
    '("data.org"))
   "\n")
#+end_src

** University of Georgia
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course
    "teaching+LEVEL=2+location=\"University of Georgia\""
    '("data.org"))
   "\n")
#+end_src

** University of Chicago
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course
    "teaching+LEVEL=2+location=\"University of Chicago\""
    '("data.org"))
   "\n")
#+end_src

** Canada/USA Mathcamp
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-course
    "teaching+LEVEL=2+location=\"Canada/USA Mathcamp\""
    '("data.org"))
   "\n")
#+end_src

