#+title: Supervision
#+author: Asilata Bapat
#+startup: noptag content

* {{{title}}}
#+begin_src emacs-lisp :results silent :exports results
  (defun pp-student ()
    "Pretty-print the current student item. This function is called when mapping over entries in the data.org file."
    (let ((name (org-entry-get nil "ITEM"))
          (year (org-entry-get nil "year-finishing"))
          (comment (org-entry-get nil "comment"))
          (accolade (org-entry-get nil "accolade"))
          )
      (format "- %s (%s)%s%s"
              name
              year
              (if (or (not comment) (string-equal comment ""))
                  "."
                (concat ", " comment))
              (if (or (not accolade) (string-equal accolade ""))
                  ""
                (concat " /" accolade "/")))
      ))
#+end_src

** Honours
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-student
    "supervision+LEVEL=2+type=\"honours\""
    '("data.org"))
   "\n")
#+end_src

** Masters
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-student
    "supervision+LEVEL=2+type=\"masters\""
    '("data.org"))
   "\n")
#+end_src

** Vacation scholars
#+begin_src emacs-lisp :results value raw :exports results
  (string-join
   (org-map-entries
    'pp-student
    "supervision+LEVEL=2+type=\"vacation\""
    '("data.org"))
   "\n")
#+end_src

